#!/bin/groovy
// Just Notes:
//
//def jobnums       = [0 , 1 , 2  , 3]
//def tags          = ["nccl" , "nonccl" , "nccl"  , "nonccl"]
//def cudatags      = ["cuda8", "cuda8"  , "cuda9" , "cuda9"]
//def dobuilds      = [1, 0, 0, 0]
//def dofulltests   = [1, 0, 0, 0]
//def dopytests     = [1, 0, 0, 0]
//def doruntimes    = [1, 1, 1, 1]
//def dockerimagesbuild    = ["nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04", "nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04"]
//def dockerimagesruntime  = ["nvidia/cuda:8.0-cudnn5-runtime-ubuntu16.04", "nvidia/cuda:8.0-cudnn5-runtime-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04"]
//def dists         = ["dist1","dist2","dist3","dist4"]

pipeline {
    agent none

    // Setup job options
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 300, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }
    stages {
        stage("Generate Docs") {
            agent {
                label "linux && docker && !micro"
            }
            steps {
                // Get source code
                deleteDir()
                checkout scm
                dumpInfo()
                script {
                    docker.withRegistry("https://docker.h2o.ai", "docker.h2o.ai") {
                        docker.image("docker.h2o.ai/r-3-5").inside {
                            sh """
                               R && `pkgdown::build_site(examples=FALSE)` && q(save="no")
                               """
                            archiveArtifacts artifacts: 'src/interface_r/docs/*.html'
                        }

                    }
                }
            }
        }
    }
}